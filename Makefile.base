################################################################################
# Make sure the ARCH variable is defined, we need it to execute all
# commands, as well as selecting the Makefile.
################################################################################
ifndef ARCH
$(error Variable ARCH was not defined.)
endif

# For now we only need the gcc parachute.
CC	:= $(ARCH)-gcc

# Include the environment Makefile.
include $(ROOT)/Makefile.$(ARCH).new

################################################################################
# Make sure the ROOT variable is set as it defines where the root of
# the tinyTimber code is located.
################################################################################
ifndef ROOT
$(error Variable ROOT was not defined.)
endif

# The kernel sources are always the same.
TT_SRC	:= $(ROOT)/tT/kernel.c
TT_OBJ	:= $(patsubst %.c, %.o, $(TT_SRC))

# We also define TT_INC to point to the root.
TT_INC	:= -I./$(ROOT)

################################################################################
# Make sure the MCU variable is set since it's /very/ vital for
# compiling the code.
################################################################################
ifndef MCU
$(error Variable MCU was not set.)
endif

################################################################################
# Make sure the Environment related variables are defined. This is a
# sanity check.
################################################################################

# ENV_SRC should contain the sources for the environment.
ifndef ENV_SRC
$(error Variable ENV_SRC was not defined.)
endif
ENV_OBJ	:= $(patsubst %.c, %.o, $(patsubst %.S, %.o, $(ENV_SRC)))

# ENV_INC should contain the environment specific includes.
ifndef ENV_INC
$(error Variable ENV_INC was not defined.)
endif

################################################################################
# Create the default targets, all should build all the environment
# objects along with the tinyTimber sources. If APP_SRC is defined then
# those objects will be built as well.
################################################################################

ifdef APP_SRC
ifndef APP_ELF
$(error APP_SRC was defined but not APP_ELF.)
endif
APP_OBJ := $(patsubst %.c, %.o, $(patsubst %.S, %.o, $(APP_SRC)))
endif

################################################################################
# Some default rules for asm and C, note that builtin rules should be
# disabled.
################################################################################

# asm rule
%.o:%.S
	$(CC) $(MCU) $(ENV_DEF) $(ENV_CFLAGS) $(ENV_INC) $(TT_DEF) $(TT_CFLAGS) $(TT_INC) $(APP_DEF) $(APP_CFLAGS) $(APP_INC) -c $< -o $@

# C rule
%.o:%.c
	$(CC) $(MCU) $(ENV_DEF) $(ENV_CFLAGS) $(ENV_INC) $(TT_DEF) $(TT_CFLAGS) $(TT_INC) $(APP_DEF) $(APP_CFLAGS) $(APP_INC) -c $< -o $@

# The APP_ELF rule, only if we defined APP_SRC
ifdef APP_SRC
$(APP_ELF): $(ENV_OBJ) $(TT_OBJ) $(APP_OBJ)
	$(CC) $(MCU) $(ENV_DEF) $(ENV_CFLAGS) $(ENV_INC) $(TT_DEF) $(TT_CFLAGS) $(TT_INC) $(APP_DEF) $(APP_CFLAGS) $(APP_INC) $^ -o $@
endif

################################################################################
# The default rules, we supply all, clean, env, tt, and app(if APP_SRC
# is defined).
################################################################################

# Ok, lets define env, and tt as phony targets in case we explicitly wish
# to rebuld them.

# Only include app if APP_SRC was defined.
ifdef APP_SRC
.PHONY: all env tt app clean
all: env tt app
else
.PHONY: all env tt clean
all: env tt
endif

env: $(ENV_OBJ)

tt: $(TT_OBJ)

# Only clean app if APP_SRC was defined.
ifdef APP_SRC
app: $(APP_OBJ)
clean:
	rm -rf $(TT_OBJ) $(ENV_OBJ) $(APP_OBJ) $(APP_ELF)
else
clean:
	rm -rf $(TT_OBJ) $(ENV_OBJ)
endif
